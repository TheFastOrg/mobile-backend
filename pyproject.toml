[tool.poetry]
name = "mobile-backend"
version = "0.1.0"
description = "Fast API Service for ba7besh"
authors = [
    "DjObYtE <obaydaba96@gmail.com>",
    "Hamza Rabah <h.rabah@outlook.com>",
]
license = "MIT"
readme = "README.md"
packages = [{include = "src"}, {include = "tests"}]



[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.105.0"
uvicorn = { extras = ["standard"], version = "^0.25.0" }
psycopg2-binary = "^2.9.9"
sqlalchemy = { extras = ["mypy"], version = "^2.0.23" }
python-dotenv = "^1.0.0"
geoalchemy2 = { extras = ["shapely"], version = "^0.14.2" }
alembic = "^1.13.1"
dependency-injector = "^4.41.0"
pydantic-settings = "^2.1.0"
pyhumps = "^3.8.0"
httpx = "^0.26.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytestarch = "^1.5.1"
mypy = "^1.8.0"
autopep8 = "^2.0.4"
pre-commit = "^3.6.0"
ruff = "^0.1.9"
poethepoet = "^0.24.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# tools configurations
[tool.autopep8]
max_line_length = 120
ignore = "E501,W6"
in-place = true
recursive = true
aggressive = 3

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
exclude = ['.venv', 'src/alembic']

[[tool.mypy.overrides]]
module = "pytestarch.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    'ignore:The `__fields__` attribute is deprecated',
]

[tool.pytest]
addopts = "--cov=src --cov-report html tests/"

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
skip_empty = true
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

[tool.ruff]
exclude = ['.venv', 'src/alembic']

# Setup custom commands
[tool.poe]
poetry_command = ""


[tool.poe.tasks.setup]
    [[tool.poe.tasks.setup.sequence]]
    cmd = "poetry install"
    [[tool.poe.tasks.setup.sequence]]
    cmd = "poetry run pre-commit install"

[tool.poe.tasks]
doc = "poetry run poe"
dev = "poetry run uvicorn src.app.main:app --reload"
test = "poetry run pytest tests -vv"
apply-migration = "poetry run alembic upgrade head"
empty-migration = "poetry run alembic revision"
clean = """
rm -rf ./**/*.pyc
       ./**/__pycache__
"""

[tool.poe.tasks.lint]
    [[tool.poe.tasks.lint.sequence]]
    cmd = "poetry run ruff src tests"
    [[tool.poe.tasks.lint.sequence]]
    cmd = "poetry run mypy src tests"

[tool.poe.tasks.format]
    [[tool.poe.tasks.format.sequence]]
    cmd = "poetry run autopep8 src tests"
    [[tool.poe.tasks.format.sequence]]
    cmd = "poetry run ruff format src tests"



[tool.poe.tasks.generate-migration]
cmd= "poetry run alembic revision --autogenerate"
help= "Generate migration script based on comparison of database to model"
args = [{ name = "message", options = ["-m", "--message"], help = "Message string to use for the migration file" }]
